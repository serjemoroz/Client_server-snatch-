  Клиент-серверная архитектура - это система, где есть клиент (устройство, которое отправляет запрос) и сервер (устройство, которое запрос принимает,
обрататывает и отдаёт ответ).
Для понимания КСА нужно запомнить самое главное: КТО СПРАШИВАЕТ ПЕРВЫМ - ТОТ КЛИЕНТ, КТО ПЕРВЫЙ ОТВЕЧАЕТ - ТОТ СЕРВЕР (а что это за устройство, вообще 
не важно).

  Клиент отвечает за то КАК показать.
  Сервер отвечает за то ЧТО показать.
  
  1. Сервер
     Сервером может быть всё, что угодно, что отвечает клиенту. Даже 2 сервера могут быть клиентом и сервером в связке друг с другом: тот сервер, который 
отправляет запросы (например, методом GET), будет клиентом, а другой сервер, который отвечает, будет сервером. И в тот же момент, сервер, который будет 
получать ответ от сервера, который ему отвечал, он будет клиентом.

  Само понятие сервера обширно:
1) это может быть физический сервер, типо, железного ящика, в котором много железок и лампочек;
2) это может быть некий софт, типо приложения;
3) некая сущность, которая принимает запрос и отвечает на него;
4) это может быть ПК или телефон, если на этих устройствах установлена программа, которая будет принимать запросы.
  Сойдёмся на том, что сервер - это устройство, которое принимает запросы, обрабатывает их и возвращает какой-то результат (это могут быть либо какие-то
данные, либо просто ответ: "Я всё получил, спасибо").
  Задача сервера: сформировать данные, а как их отображать, решает сам клиент.

 
  2. Клиент
  Клиентом может быть, условно говоря, любая "железяка", любой браузер, мобильный клиент... В общем, всё что угодно, что может отправлять запрос на сервер.
Это приложение или устройство, которое отправляет запрос. ВАЖНО! Что клиент - это не человек, это всё таки устройство/приложение/браузер/телефон/часы/
домашяя станция/"умный" чайник... Клиентом даже может быть маленький микро-контролёр, который запрашивает данные о погоде.

  Когда мы в окне браузера в URL, например: http://ya.ru/login_form, происходит следующее:
- мы со своего клиента отправляем запросы на сервер → запрос прилетает в API на сервер;
- на сервере уже есть программная прослойка, которая состоит из эндпойнтов - это API (Application Programming Interface) с прописанными методами, и есть 
конкретно написанный метод (функция, набор действий, "рычаг"), за который если "дёрнуть" правильным действием с правильными параметрами, то этот "рычаг" 
ответит тем, что мы ожидаем, напрмер, у нас есть "рычаг", который называется login_form, вот мы ровно тот рычаг, который называется login_form через 
адресную строку дёргаем на сервере. Программисты написали, что если мы дёргаем "рычаг" login_form, то клиенту надо отдать строго форму логина, 


